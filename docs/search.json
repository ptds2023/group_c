[{"path":[]},{"path":[]},{"path":"/articles/function-usage.html","id":"parameters","dir":"Articles","previous_headings":"1. add_expense","what":"Parameters","title":"Functions - How to use","text":"category: string describing type expense (e.g., “Groceries”, “Utilities”). amount: monetary value expense. expenses_data: reactive value contains data frame expenses. selected_categories: reactive value storing list categories already selected. session: Shiny session object, used showing modal dialogues Shiny app.","code":""},{"path":"/articles/function-usage.html","id":"functionality","dir":"Articles","previous_headings":"1. add_expense","what":"Functionality","title":"Functions - How to use","text":"Validate Amount: function first checks amount NA (available/missing) less 0. either true, modal dialog box displayed user, indicating amount must non-negative, function returns FALSE. Check Category Update Data: function checks category already present selected_categories. ’s new category, function proceeds add expense. appends new expense data (category amount) current expenses_data data frame using rbind. expenses_data reactive value updated new data frame. selected_categories reactive value also updated include new category. function returns TRUE indicate expense successfully added. Handle Duplicate Category: category already exists selected_categories, function add expense returns FALSE.","code":""},{"path":"/articles/function-usage.html","id":"example","dir":"Articles","previous_headings":"1. add_expense","what":"Example","title":"Functions - How to use","text":"Shiny app, function used within observeEvent similar reactive context. triggered user action, specifically pressing “Add Expense” button. function reads category amount user input, attempts add expense, can take additional actions based whether expense successfully added.","code":"# Load the Shiny package if (!require(shiny)) install.packages(\"shiny\") #> Loading required package: shiny #> Warning: package 'shiny' was built under R version 4.3.1 library(shiny)  # Assuming you have a Shiny reactive environment set up  # Initialize reactive values expenses_data <- reactiveVal(data.frame(category = character(), amount = numeric())) selected_categories <- reactiveVal(character())  # Example usage within a Shiny observeEvent observeEvent(input$add_expense, {   result <- add_expense(input$category, input$expense, expenses_data, selected_categories)   if (result) {     # Perform actions after successful addition     print(\"Expense added successfully.\")   } else {     # Handle cases where addition fails     print(\"Failed to add expense.\")   } })"},{"path":[]},{"path":[]},{"path":"/articles/function-usage.html","id":"parameters-1","dir":"Articles","previous_headings":"2. generate_bar_chart","what":"Parameters","title":"Functions - How to use","text":"data: data frame contains data plotted. data frame expected least two columns: category: column contains names categories (like “Income”, “Expenses”, “Savings”). amount: column contains numerical values associated category. colorblind_switch: logical flag (TRUE FALSE) , set TRUE, enables colorblind-friendly color palette bar chart. important accessibility, ensuring visualization readable individuals color vision deficiencies.","code":""},{"path":"/articles/function-usage.html","id":"functionality-1","dir":"Articles","previous_headings":"2. generate_bar_chart","what":"Functionality","title":"Functions - How to use","text":"Bar Chart Creation: function uses ggplot2 create basic bar chart. aes function specifies aesthetics plot, mapping category x-axis amount y-axis. geom_bar(stat = \"identity\") tells ggplot2 create bar chart heights bars represent amount values data. Color Palette: Depending colorblind_switch, selects color palette either standard colorblind-friendly. done using scale_fill_manual(values = color_palette). Styling Labels: chart styled titles labels using labs, minimal theme applied clean, modern look (theme_minimal()). legend removed simplicity. Plotly Conversion: Finally, ggplotly(p) converts ggplot object Plotly object. step enhances interactivity plot, allowing features like hover effects web-based environment.","code":""},{"path":"/articles/function-usage.html","id":"example-1","dir":"Articles","previous_headings":"2. generate_bar_chart","what":"Example","title":"Functions - How to use","text":"Shiny application, plot can rendered using renderPlotly() make interactive.","code":"# Sample data data <- data.frame(   category = c(\"Income\", \"Expenses\", \"Savings\"),   amount = c(1000, 750, 250) )  # Generate and display the bar chart bar_chart <- generate_bar_chart(data, colorblind_switch = FALSE) bar_chart"},{"path":"/articles/function-usage.html","id":"output","dir":"Articles","previous_headings":"2. generate_bar_chart","what":"Output","title":"Functions - How to use","text":"function returns Plotly ggplot object, interactive plot can rendered web browser, making suitable Shiny applications R Markdown documents.","code":""},{"path":[]},{"path":[]},{"path":"/articles/function-usage.html","id":"parameters-2","dir":"Articles","previous_headings":"3. generate_comparison_plot","what":"Parameters","title":"Functions - How to use","text":"user_vs_swiss: data frame contains data comparison. data frame three columns: category: Categories expenses (like “Food”, “Transport”, “Utilities”). user_amount: amount money spent user category. swiss_amount: average amount spent category Switzerland. colorblind_switch: logical flag determines whether plot use colorblind-friendly color palette. enhances accessibility users color vision deficiencies.","code":""},{"path":"/articles/function-usage.html","id":"functionality-2","dir":"Articles","previous_headings":"3. generate_comparison_plot","what":"Functionality","title":"Functions - How to use","text":"Data Visualization: function uses ggplot2 create scatter plot. plots user_amount swiss_amount points plot, point’s position determined relative share total expenses absolute amount. geom_point function used twice plot points user expenses Swiss average expenses graph, differentiated shapes (“User” vs. “Swiss”). Color Palette: Depending colorblind_switch, selects appropriate color palette (brewer.pal) either standard friendly colorblind users. Styling Labels: chart styled titles, labels, minimal themes clean appearance. legend positioned right clarity. x-axis represents percentage share category’s expenses relative total, y-axis represents actual amount spent. Plotly Conversion: ggplotly(p) converts ggplot object Plotly object, making plot interactive. interactivity enhances user engagement, allowing features like tooltips hover.","code":""},{"path":"/articles/function-usage.html","id":"example-usage","dir":"Articles","previous_headings":"3. generate_comparison_plot","what":"Example Usage","title":"Functions - How to use","text":"Just like previous ones, function intended used within Shiny server function.","code":"# Sample data for user expenses vs. average expenses user_vs_swiss <- data.frame(   category = rep(c(\"Food\", \"Transport\", \"Utilities\"), 2),   amount = c(200, 150, 100, 250, 180, 120),   type = c(rep(\"User's Expenses\", 3), rep(\"Swiss Average Expenses\", 3)),   hover_text = c(\"Food: 200\", \"Transport: 150\", \"Utilities: 100\", \"Food: 250\", \"Transport: 180\", \"Utilities: 120\") )  # Generate the comparison scatter plot colorblind_switch <- FALSE  # Set the colorblind mode comparison_plot <- generate_comparison_plot(user_vs_swiss, colorblind_switch)  # Display the plot comparison_plot"},{"path":"/articles/function-usage.html","id":"output-1","dir":"Articles","previous_headings":"3. generate_comparison_plot","what":"Output","title":"Functions - How to use","text":"function returns Plotly ggplot object, interactive plot suitable web applications, particularly Shiny.","code":""},{"path":[]},{"path":"/articles/function-usage.html","id":"purpose-to-dynamically-generate-a-visualization-of-expenses-data-either-as-a-scatter-plot-or-a-pie-chart-based-on-user-input-","dir":"Articles","previous_headings":"4. generate_scatter_or_pie","what":"Purpose: to dynamically generate a visualization of expenses data, either as a scatter plot or a pie chart, based on user input.","title":"Functions - How to use","text":"Adaptive Visualization: function can switch two types plots, offering flexibility data presented.","code":""},{"path":"/articles/function-usage.html","id":"parameters-3","dir":"Articles","previous_headings":"4. generate_scatter_or_pie","what":"Parameters","title":"Functions - How to use","text":"expenses_data_summary: data frame containing summarized expense data. least two columns: category: names expense categories. percentage: percentage share category total expenses. (function seems also use amount column, indicated scatter plot creation code.) scatter_plot_type: character string specifies type plot generate. can either “Scatter Plot” “Pie Chart”. parameter allows function switch plot types based user preference. colorblind_switch: logical value , true, switches color palette colorblind-friendly mode. enhances accessibility users color vision deficiencies.","code":""},{"path":"/articles/function-usage.html","id":"functionality-3","dir":"Articles","previous_headings":"4. generate_scatter_or_pie","what":"Functionality","title":"Functions - How to use","text":"Color Palette Selection: Based colorblind_switch, function selects suitable color palette using brewer.pal. Creating Scatter Plot: scatter_plot_type “Scatter Plot”, function creates scatter plot using ggplot2. scatter plot represents expense category point, position determined percentage share (x-axis) actual amount (y-axis). Additional features like point color, size, labels added clarity aesthetics. scatter plot converted interactive Plotly plot using ggplotly. Creating Pie Chart: scatter_plot_type “Pie Chart”, function uses Plotly’s plot_ly create pie chart. pie chart shows proportion expense category total expenses. includes features like labels, percentages, hover information.","code":""},{"path":"/articles/function-usage.html","id":"example-2","dir":"Articles","previous_headings":"4. generate_scatter_or_pie","what":"Example","title":"Functions - How to use","text":"function can called within Shiny server function, user’s choice plot type colorblind mode can passed inputs. resulting plot can rendered UI using renderPlotly.","code":"# Packages suppressPackageStartupMessages({   library(ggplot2)   library(plotly)   library(RColorBrewer)   library(magrittr) })   # Dataframe expenses_summary <- data.frame(   category = c(\"Food\", \"Transport\", \"Utilities\"),   amount = c(200, 150, 100),   percentage = c(40, 30, 30))  # Generate a pie chart pie_chart <- generate_scatter_or_pie(expenses_summary, \"Pie Chart\", FALSE) pie_chart"},{"path":"/articles/package-installation.html","id":"installing-using-github","dir":"Articles","previous_headings":"","what":"Installing using GitHub","title":"Package - How to Install","text":"","code":"devtools::install_github(\"ptds2023/group_c\") library(budgetoverview)"},{"path":"/articles/package-installation.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"Package - How to Install","text":"encounter issues, ensure R package dependencies date. specific errors, consult documentation package’s issue tracker GitHub.","code":""},{"path":[]},{"path":"/articles/shiny-usage.html","id":"to-track-your-expenses","dir":"Articles","previous_headings":"Inputting Data","what":"To track your expenses:","title":"Shiny - How to use","text":"Enter Income: Start inputting monthly income ‘Enter Income’ field. Enter Expenses : Add individual expenses : Selecting category ‘Category’ dropdown. Entering expense amount. Clicking ‘Add Expense’ add summary.","code":""},{"path":[]},{"path":"/articles/shiny-usage.html","id":"the-summary-tab-displays","dir":"Articles","previous_headings":"Navigating the App","what":"The ‘Summary’ tab displays :","title":"Shiny - How to use","text":"bar chart income, expenses, savings. scatter plot showing expenses category. table containing information ’re inputting, updating enter data. interactive table, can change values inside , case make input error. ‘Compare average’ tab allows view spending compares swiss average expenses. Toggle ‘Scatter Plot’ ‘Pie Chart’ change expense visualization. Use ‘Colorblind-Friendly’ option accessible color palettes.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Konstantinos Kourlimpinis. Author, maintainer. Marc Bourleau. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kourlimpinis K (2023). budgetoverview: Budget Dashboard using Shiny. R package version 0.1.0.","code":"@Manual{,   title = {budgetoverview: Budget Dashboard using Shiny},   author = {Konstantinos Kourlimpinis},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Budget Dashboard using Shiny ","text":"budgetoverview package managing personal finances, offering monthly analysis comparisons average Swiss household’s finances. Shiny app enables users input monthly income expenses visualization interactive scatter plots pie charts. offers full interactivity error correction includes color-blind-friendly graph options.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Budget Dashboard using Shiny ","text":"Use following command console:","code":"devtools::install_github(\"ptds/group_c\") library(budgetoverview)"},{"path":"/index.html","id":"shiny---how-to-launch","dir":"","previous_headings":"","what":"Shiny - How to launch","title":"Budget Dashboard using Shiny ","text":"Website Console","code":"budgetoverview::launchMyApp()"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Budget Dashboard using Shiny ","text":"Click ","code":""},{"path":"/index.html","id":"key-features","dir":"","previous_headings":"Documentation","what":"Key Features:","title":"Budget Dashboard using Shiny ","text":"Expense Logging: easy categorization recording personal expenses. Financial Calculations: automatically computes total expenses savings. Comparative Analysis: enables comparison personal spending average expenses Swiss household. Visual Representations: provides insightful bar charts scatter plots financial data.","code":""},{"path":"/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Budget Dashboard using Shiny ","text":"two main places get help budgetoverview: RStudio community friendly place ask questions. Stack Overflow great source answers common R programming questions. also great place get help, created reproducible example illustrates problem.","code":""},{"path":[]},{"path":"/index.html","id":"folders","dir":"","previous_headings":"File Organization","what":"Folders:","title":"Budget Dashboard using Shiny ","text":"R: contains functions used package. man: generated automatically Roxygen. Documentation functions. raw-data: web scrapped data. vignettes: contains vignettes used pkgdown website tests: tests conducted function validation inst: used store non-R files static content included package, presentation files. renv: managing project-specific dependencies - makes sure environment reproducible.","code":""},{"path":"/index.html","id":"files","dir":"","previous_headings":"File Organization","what":"Files:","title":"Budget Dashboard using Shiny ","text":"DESCRIPTION: metadata file including information package name, version, authors dependencies packages.","code":""},{"path":"/reference/add_expense.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an Expense to the Data Frame — add_expense","title":"Add an Expense to the Data Frame — add_expense","text":"function adds new expense entry given data frame expenses. checks validity category amount adding.","code":""},{"path":"/reference/add_expense.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an Expense to the Data Frame — add_expense","text":"","code":"add_expense(category, amount, expenses_data, selected_categories, session)"},{"path":"/reference/add_expense.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an Expense to the Data Frame — add_expense","text":"category string specifying category expense. amount numeric value representing amount expense. Must non-negative. expenses_data reactive value containing data frame expenses. selected_categories reactive value storing list already selected categories. session Shiny session object passed showModal displaying modals.","code":""},{"path":"/reference/add_expense.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an Expense to the Data Frame — add_expense","text":"Logical TRUE expense successfully added, FALSE otherwise.","code":""},{"path":"/reference/add_expense.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add an Expense to the Data Frame — add_expense","text":"Group C composed Marc Bourleau, Eleonore Gillain, Khrystyna Khmilovska Konstantinos Kourlimpinis.","code":""},{"path":"/reference/add_expense.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an Expense to the Data Frame — add_expense","text":"","code":"if (FALSE) {   # Simulate the environment of a Shiny app   library(shiny)   expenses_data <- reactiveVal(data.frame(category = character(), amount = numeric()))   selected_categories <- reactiveVal(character())   session <- shiny::getDefaultReactiveDomain()    # Examples of add_expense function   add_expense(\"Food\", 50, expenses_data, selected_categories, session)   add_expense(\"Transport\", -10, expenses_data, selected_categories, session) # Invalid amount   add_expense(\"Food\", 30, expenses_data, selected_categories, session) # Category already exists }"},{"path":"/reference/generate_bar_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Bar Chart with Plotly — generate_bar_chart","title":"Create a Bar Chart with Plotly — generate_bar_chart","text":"function creates bar chart visualizing data income, expenses, savings. supports colorblind-friendly mode changing color palette. function primarily designed use Shiny application display financial data.","code":""},{"path":"/reference/generate_bar_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Bar Chart with Plotly — generate_bar_chart","text":"","code":"generate_bar_chart(data, colorblind_switch)"},{"path":"/reference/generate_bar_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Bar Chart with Plotly — generate_bar_chart","text":"data data frame containing data plotted. Expected contain least two columns: 'category' data categories 'amount' values. colorblind_switch Logical flag indicating whether use colorblind-friendly color palette.","code":""},{"path":"/reference/generate_bar_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Bar Chart with Plotly — generate_bar_chart","text":"Plotly ggplot object representing bar chart.","code":""},{"path":"/reference/generate_bar_chart.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a Bar Chart with Plotly — generate_bar_chart","text":"Group C composed Marc Bourleau, Eleonore Gillain, Khrystyna Khmilovska Konstantinos Kourlimpinis.","code":""},{"path":"/reference/generate_bar_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Bar Chart with Plotly — generate_bar_chart","text":"","code":"# Example usage: data <- data.frame(   category = c(\"Income\", \"Expenses\", \"Savings\"),   amount = c(1000, 750, 250) ) # Example for a colorblind-friendly chart plot <- generate_bar_chart(data, TRUE) # In a Shiny app, use renderPlotly() to display this plot"},{"path":"/reference/generate_comparison_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Comparison Scatter Plot — generate_comparison_plot","title":"Generate Comparison Scatter Plot — generate_comparison_plot","text":"Creates interactive scatter plot comparing user expenses Swiss average expenses using Plotly. plot designed use within Shiny application features comparison user Swiss average expenses across various categories. supports colorblind-friendly mode altering color palette includes interactive hover text detailed expense information.","code":""},{"path":"/reference/generate_comparison_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Comparison Scatter Plot — generate_comparison_plot","text":"","code":"generate_comparison_plot(user_vs_swiss, colorblind_switch)"},{"path":"/reference/generate_comparison_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Comparison Scatter Plot — generate_comparison_plot","text":"user_vs_swiss data frame containing user's Swiss average expenses comparison. data frame columns 'category', 'user_amount', 'swiss_amount'. also 'type' 'hover_text' plot aesthetics interactivity. colorblind_switch Logical flag indicating whether use colorblind-friendly color palette.","code":""},{"path":"/reference/generate_comparison_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Comparison Scatter Plot — generate_comparison_plot","text":"Plotly interactive scatter plot object representing comparison expenses.","code":""},{"path":"/reference/generate_comparison_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Comparison Scatter Plot — generate_comparison_plot","text":"Group C composed Marc Bourleau, Eleonore Gillain, Khrystyna Khmilovska, Konstantinos Kourlimpinis.","code":""},{"path":"/reference/generate_comparison_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Comparison Scatter Plot — generate_comparison_plot","text":"","code":"# Example usage within a Shiny server function: user_vs_swiss <- data.frame(   category = c(\"Food\", \"Transport\", \"Utilities\"),   user_amount = c(200, 150, 100),   swiss_amount = c(250, 180, 120),   type = c(\"User's Expenses\", \"User's Expenses\", \"User's Expenses\"),   hover_text = c(\"Food: 200\", \"Transport: 150\", \"Utilities: 100\") ) # Assume colorblind_switch is a boolean input from Shiny output$comparisonPlot <- renderPlotly({   generate_comparison_plot(user_vs_swiss, colorblind_switch) }) #> Error in renderPlotly({    generate_comparison_plot(user_vs_swiss, colorblind_switch)}): could not find function \"renderPlotly\""},{"path":"/reference/generate_scatter_or_pie.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Scatter Plot or Pie Chart — generate_scatter_or_pie","title":"Generate Scatter Plot or Pie Chart — generate_scatter_or_pie","text":"function dynamically creates either scatter plot pie chart based user's choice Shiny application. function adapts plot type depending input provided: 'Scatter Plot' 'Pie Chart'. plots designed provide insights distribution expenses across different categories, represented amounts percentages.","code":""},{"path":"/reference/generate_scatter_or_pie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Scatter Plot or Pie Chart — generate_scatter_or_pie","text":"","code":"generate_scatter_or_pie(   expenses_data_summary,   scatter_plot_type,   colorblind_switch )"},{"path":"/reference/generate_scatter_or_pie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Scatter Plot or Pie Chart — generate_scatter_or_pie","text":"expenses_data_summary data frame summarizing expenses data. contain least columns 'category', 'amount', 'percentage', 'percentage' represents percentage share category total expenses. scatter_plot_type character string specifying type plot generate. Expected values \"Scatter Plot\" \"Pie Chart\". colorblind_switch logical value indicating whether use colorblind-friendly color palette. palette changes based value parameter.","code":""},{"path":"/reference/generate_scatter_or_pie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Scatter Plot or Pie Chart — generate_scatter_or_pie","text":"Plotly object representing specified type plot (either scatter plot pie chart). function returns NULL data plot.","code":""},{"path":"/reference/generate_scatter_or_pie.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Scatter Plot or Pie Chart — generate_scatter_or_pie","text":"Group C composed Marc Bourleau, Eleonore Gillain, Khrystyna Khmilovska, Konstantinos Kourlimpinis.","code":""},{"path":"/reference/generate_scatter_or_pie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Scatter Plot or Pie Chart — generate_scatter_or_pie","text":"","code":"# Example usage within a Shiny server function: expenses_summary <- data.frame(   category = c(\"Food\", \"Transport\", \"Utilities\"),   amount = c(200, 150, 100),   percentage = c(40, 30, 30) ) output$myPlot <- renderPlotly({   generate_scatter_or_pie(expenses_summary, input$plotType, input$colorblindSwitch) }) #> Error in renderPlotly({    generate_scatter_or_pie(expenses_summary, input$plotType,         input$colorblindSwitch)}): could not find function \"renderPlotly\""},{"path":"/reference/launchMyApp.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch My Shiny App — launchMyApp","title":"Launch My Shiny App — launchMyApp","text":"function starts Shiny application contained package.","code":""},{"path":"/reference/launchMyApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch My Shiny App — launchMyApp","text":"","code":"launchMyApp()"},{"path":"/reference/launchMyApp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Launch My Shiny App — launchMyApp","text":"Group C composed Marc Bourleau, Eleonore Gillain, Khrystyna Khmilovska Konstantinos Kourlimpinis.","code":""}]
